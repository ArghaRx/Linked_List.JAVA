https://leetcode.com/problems/linked-list-cycle/description/


********************************  Brute  ******************************************************

By using hashmap   TC - O(N * 2 * log(N) )  SC -O(N)

public class Solution {
    public boolean hasCycle(ListNode head) {
        Map<ListNode , Integer> map = new HashMap<>();
        ListNode temp = head;
        while(temp != null)
        {
            if(map.containsKey(temp)) return true;
            map.put(temp, 1);
            temp = temp.next;
        }
        return false;
    }
}



********************************   Optimal  *****************************************************

TC - O(N)  sc - O(1)


public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
            if(fast == slow) return true;
        }
        return false;
    }
}
