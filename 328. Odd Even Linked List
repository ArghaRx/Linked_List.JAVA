https://leetcode.com/problems/odd-even-linked-list/description/


************************************** Brute  ***************************************  /// it called memory exceed

class Solution {
    public ListNode oddEvenList(ListNode head) {
        List<Integer> ans = new ArrayList<>();
        ListNode temp = head;

        // ODD
        while(temp != null && temp.next != null)
        {
            ans.add(temp.val);
            temp = temp.next.next;
        }
        if(temp != null) ans.add(temp.val);

        // EVEN
        ListNode temp2 = head.next;
        while(temp2 != null && temp2.next != null)
        {
            ans.add(temp2.val);
            temp = temp2.next.next;
        }
        if(temp != null) ans.add(temp.val);

        // Now ans list to LL
        int ind = 0;
        ListNode temp3 = head;
        while(temp3 != null)
        {
            temp3.val = ans.get(ind++);
            temp3 = temp3.next;
        }
        return head;
        
    }
}

TC - O( N / 2) + O( N / 2 ) + O(N) = O(2N)             SC - O(N)   





*****************************************  OPTIMAL ******************************************

class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null)
            return head;

        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = head.next;

        while (even != null && even.next != null) {
            // connect
            odd.next = odd.next.next;
            even.next = even.next.next;

            // iterate
            odd = odd.next;
            even = even.next;
        }
        odd.next = evenHead;

        return head;
    }
}  

   SC - O(1)      TC - O(N)  

