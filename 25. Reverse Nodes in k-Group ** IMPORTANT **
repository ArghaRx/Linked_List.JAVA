https://leetcode.com/problems/reverse-nodes-in-k-group/

TC - O(2N)   SC - O(1)


class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode temp = head;
        ListNode prevNode = null;

        while (temp != null) {
            ListNode kthNode = findkthNode(temp, k);

            // if i cannot find any group of k element
            // simple prevNode.next = temp; and break;
            // if previous node is not null ******
            if (kthNode == null) {
                if (prevNode != null)
                    prevNode.next = temp;
                break;
            }

            // otherwise if it form a group

            // preserve the nextNode and nextNode.next = null for reverse function
            ListNode nextNode = kthNode.next;
            kthNode.next = null;
            reverse(temp);

            // it only happens for the first time
            // here temp is equal to head so after reverse kthNOde is form the head
            if (temp == head)
                head = kthNode;

            // otherewise previous node connect the kthNode
            else
                prevNode.next = kthNode;

            prevNode = temp; // prevNode update and indicate the temp
            temp = nextNode; // also temp update to nextNode

        }
        return head;
    }

    public ListNode findkthNode(ListNode temp, int k)
    {
        // fist k--;
        k -= 1;

        //in loop check 2 condition 
        // 1. temp not null and 2. k > 0
        while(temp != null && k > 0)
        {
            k--;
            temp = temp.next;
        }
        return temp;
    }

    public ListNode reverse (ListNode head)
    {
        if(head == null || head.next == null) return head;

        ListNode newHead = reverse(head.next);

        ListNode front = head.next;
        front.next = head;
        head.next = null;

    return newHead;
    }
}
