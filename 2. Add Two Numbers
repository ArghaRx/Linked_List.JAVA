https://leetcode.com/problems/intersection-of-two-linked-lists/



Time Complexity:  O(max(m,n)). Assume that m and n represent the length of l1 and l2 respectively, the algorithm above iterates at most max(m,n) times.

Space Complexity:  O(max(m,n)).



class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0, sum = 0;
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        ListNode dummy = new ListNode(-1);
        ListNode cur = dummy;

        while(temp1 != null || temp2 != null)
        {
            sum = carry;
            if(temp1 != null) sum += temp1.val;
            if(temp2 != null) sum += temp2.val;

            ListNode newNode = new ListNode(sum % 10);
            carry = sum /10;

            cur.next = newNode;
            cur = cur.next;
            if(temp1 != null) temp1 = temp1.next;
            if(temp2 != null) temp2 = temp2.next;
        }

        if(carry != 0)
        {
            ListNode newNode = new ListNode(carry);
            cur.next = newNode;
            cur = cur.next;

        }
        return dummy.next;
    }
}
