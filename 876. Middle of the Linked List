https://leetcode.com/problems/middle-of-the-linked-list/description/

Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.



*************************************************  Brute  *******************************************************

TC - O(N + N/2)
SC - O(1)

class Solution {
    public ListNode middleNode(ListNode head) {
        int cnt = 0;
        ListNode temp = head;
        while (temp != null) {
            cnt++;
            temp = temp.next;
        }

        int res = (cnt / 2) + 1;

        temp = head;
        while (temp != null) {
            res--;
            if (res == 0)
                break;
            temp = temp.next;

        }
        return temp;

    }
}






***************************************************  Optimal  *******************************************************

By using Tortoise nad hare ...  TC - O(N)  SC - O(1)


class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
}
